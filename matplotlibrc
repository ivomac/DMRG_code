#  vim:set ft=python fdm=expr cms=#\ %s: #

#base00     ='#657b83'
#base01     ='#93a1a1'
#base2      ='#eee8d5'
#base3      ='#fdf6e3'
#base01     ='#586e75'
#Magenta    ='#d33682'
#Blue       ='#268bd2'
#cyan       ='#2aa198'
#violet     ='#6c71c4'
#green      ='#859900'
#orange     ='#cb4b16'
# axes.prop_cycle    : cycler('color', ['268BD2', '2AA198', '859900', 'B58900', 'CB4B16', 'DC322F', 'D33682', '6C71C4'])

#### MATPLOTLIBRC FORMAT

# Colors: for the color values below, you can either use
#     - a matplotlib color string, such as r, k, or b
#     - an rgb tuple, such as (1.0, 0.5, 0.0)
#     - a hex string, such as ff00ff
#     - a scalar grayscale intensity such as 0.75
#     - a legal html color name, e.g., red, blue, darkslategray

# ***************************************************************************
# * BACKENDS                                                                *
# ***************************************************************************
# The default backend.  If you omit this parameter, the first working
# backend from the following list is used:
#     MacOSX Qt5Agg Qt4Agg Gtk3Agg TkAgg WxAgg Agg
# Other choices include:
#     Qt5Cairo Qt4Cairo GTK3Cairo TkCairo WxCairo Cairo Wx
#     PS PDF SVG Template
# You can also deploy your own backend outside of matplotlib by referring to
# the module name (which must be in the PYTHONPATH) as 'module://my_backend'.
backend: PDF

# The port to use for the web server in the WebAgg backend.
webagg.port: 8988

# The address on which the WebAgg web server should be reachable
webagg.address: 127.0.0.1

# If webagg.port is unavailable, a number of other random ports will
# be tried until one that is available is found.
webagg.port_retries: 50

# When True, open the webbrowser to the plot that is shown
webagg.open_in_browser: False

# If you are running pyplot inside a GUI and your backend choice
# conflicts, we will automatically try to find a compatible one for
# you if backend_fallback is True
backend_fallback: False

interactive: False
toolbar:     None  ## {None, toolbar2}
timezone:    UTC       ## a pytz timezone string, e.g., US/Central or Europe/Paris


## ***************************************************************************
## * LINES                                                                   *
## ***************************************************************************
## See https://matplotlib.org/api/artist_api.html#module-matplotlib.lines
## for more information on line properties.

lines.linewidth:       1.2   ## line width in points
lines.linestyle:       -     ## solid line
lines.color:           C0    ## has no affect on plot(); see axes.prop_cycle
lines.marker:          None  ## the default marker
lines.markerfacecolor: auto  ## the default marker face color
lines.markeredgecolor: auto  ## the default marker edge color
lines.markeredgewidth: 0.3   ## the line width around the marker symbol
lines.markersize:      3     ## marker size, in points
lines.dash_joinstyle:  round ## {miter, round, bevel}
lines.dash_capstyle:   round ## {butt, round, projecting}
lines.solid_joinstyle: round ## {miter, round, bevel}
lines.solid_capstyle:  round ## {butt, round, projecting}
lines.antialiased:     True  ## render lines in antialiased (no jaggies)

# The three standard dash patterns.  These are scaled by the linewidth.
lines.dashed_pattern:  4, 6
lines.dashdot_pattern: 4, 6, 1, 6
lines.dotted_pattern:  1, 6
lines.scale_dashes:    False

markers.fillstyle : full  ## {full, left, right, bottom, top, none}

pcolor.shading: auto

# ***************************************************************************
# * FONT                                                                    *
# ***************************************************************************
# The font properties used by `text.Text`.
# See https://matplotlib.org/api/font_manager_api.html for more information
# on font properties.  The 6 font properties used for font matching are
# given below with their default values.
#
# The font.family property has five values:
#     - 'serif' (e.g., Times),
#     - 'sans-serif' (e.g., Helvetica),
#     - 'cursive' (e.g., Zapf-Chancery),
#     - 'fantasy' (e.g., Western), and
#     - 'monospace' (e.g., Courier).
# Each of these font families has a default list of font names in decreasing
# order of priority associated with them.  When text.usetex is False,
# font.family may also be one or more concrete font names.
#
# The font.style property has three values: normal (or roman), italic
# or oblique.  The oblique style will be used for italic, if it is not
# present.
#
# The font.variant property has two values: normal or small-caps.  For
# TrueType fonts, which are scalable fonts, small-caps is equivalent
# to using a font size of 'smaller', or about 83%% of the current font
# size.
#
# The font.weight property has effectively 13 values: normal, bold,
# bolder, lighter, 100, 200, 300, ..., 900.  Normal is the same as
# 400, and bold is 700.  bolder and lighter are relative values with
# respect to the current weight.
#
# The font.stretch property has 11 values: ultra-condensed,
# extra-condensed, condensed, semi-condensed, normal, semi-expanded,
# expanded, extra-expanded, ultra-expanded, wider, and narrower.  This
# property is not currently implemented.
#
# The font.size property is the default font size for text, given in pts.
# 10 pt is the standard value.
#
# Note that font.size controls default text sizes.  To configure
# special text sizes tick labels, axes, labels, title, etc, see the rc
# settings for axes and ticks.  Special text sizes can be defined
# relative to font.size, using the following values: xx-small, x-small,
# small, medium, large, x-large, xx-large, larger, or smaller

font.family:  serif
font.style:   normal
font.variant: normal
font.weight:  normal
font.stretch: normal
font.size:    7.0

font.serif:      Computer Modern Roman, DejaVu Serif, Bitstream Vera Serif, New Century Schoolbook, Century Schoolbook L, Utopia, ITC Bookman, Bookman, Nimbus Roman No9 L, Times New Roman, Times, Palatino, Charter, serif
font.sans-serif: Computer Modern Sans Serif, DejaVu Sans, Bitstream Vera Sans, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif
font.cursive:    Apple Chancery, Textile, Zapf Chancery, Sand, Script MT, Felipa, cursive
font.fantasy:    Comic Neue, Comic Sans MS, Chicago, Charcoal, ImpactWestern, Humor Sans, xkcd, fantasy
font.monospace:  DejaVu Sans Mono, Bitstream Vera Sans Mono, Computer Modern Typewriter, Andale Mono, Nimbus Mono L, Courier New, Courier, Fixed, Terminal, monospace


# ***************************************************************************
# * TEXT                                                                    *
# ***************************************************************************
# The text properties used by `text.Text`.
# See https://matplotlib.org/api/artist_api.html#module-matplotlib.text
# for more information on text properties
text.color : black


# ***************************************************************************
# * LaTeX                                                                   *
# ***************************************************************************
# See following links for more information on LaTex properties:
# https://matplotlib.org/tutorials/text/usetex.html
# https://scipy-cookbook.readthedocs.io/items/idx_matplotlib_typesetting.html
text.usetex: False     ## use latex for all text handling. The following fonts
                      # are supported through the usual rc parameter settings:
                      # new century schoolbook, bookman, times, palatino,
                      # zapf chancery, charter, serif, sans-serif, helvetica,
                      # avant garde, courier, monospace, computer modern roman,
                      # computer modern sans serif, computer modern typewriter
                      # If another font is desired which can loaded using the
                      # LaTeX \usepackage command, please inquire at the
                      # matplotlib mailing list

text.latex.preamble: \usepackage[utf8]{inputenc}\usepackage[T1]{fontenc}\usepackage{amsmath, amssymb, physics}
                        ## IMPROPER USE OF THIS FEATURE WILL LEAD TO LATEX FAILURES
                        # AND IS THEREFORE UNSUPPORTED. PLEASE DO NOT ASK FOR HELP
                        # IF THIS FEATURE DOES NOT DO WHAT YOU EXPECT IT TO.
                        # text.latex.preamble is a single line of LaTeX code that
                        # will be passed on to the LaTeX system. It may contain
                        # any code that is valid for the LaTeX "preamble", i.e.
                        # between the "\documentclass" and "\begin{document}"
                        # statements.
                        # Note that it has to be put on a single line, which may
                        # become quite long.
                        # The following packages are always loaded with usetex, so
                        # beware of package collisions: color, geometry, graphicx,
                        # type1cm, textcomp.
                        # Adobe Postscript (PSSNFS) font packages may also be
                        # loaded, depending on your font settings.

text.hinting : either  ## May be one of the following:
                      #     - none: Perform no hinting
                      #     - auto: Use FreeType's autohinter
                      #     - native: Use the hinting information in the
                      #               font file, if available, and if your
                      #               FreeType library supports it
                      #     - either: Use the native hinting information,
                      #               or the autohinter if none is available.
text.hinting_factor : 8  ## Specifies the amount of softness for hinting in the
                          # horizontal direction.  A value of 1 will hint to full
                          # pixels.  A value of 2 will hint to half pixels etc.
text.kerning_factor : 0  ## Specifies the scaling factor for kerning values. This
                          # is provided solely to allow old test images to remain
                          # unchanged. Set to 6 to obtain previous behavior. Values
                          # other than 0 or 6 have no defined meaning.
text.antialiased : True  ## If True (default), the text will be antialiased.
                          # This only affects the Agg backend.

# The following settings allow you to select the fonts in math mode.
# They map from a TeX font name to a fontconfig font pattern.
# These settings are only used if mathtext.fontset is 'custom'.
# Note that this "custom" mode is unsupported and may go away in the future.
mathtext.cal : cursive
mathtext.rm  : sans
mathtext.tt  : monospace
mathtext.it  : sans:italic
mathtext.bf  : sans:bold
mathtext.sf  : sans

mathtext.fontset : cm  ## Should be 'dejavusans' (default),
                                # 'dejavuserif', 'cm' (Computer Modern), 'stix',
                                # 'stixsans' or 'custom'
mathtext.fallback: None ## When True, use symbols from the Computer Modern
                                 # fonts when a symbol can not be found in one of
                                 # the custom math fonts.
mathtext.default : it  ## The default font to use for math.
                        # Can be any of the LaTeX font names, including
                        # the special name "regular" for the same font
                        # used in regular text.


# ***************************************************************************
# * AXES                                                                    *
# ***************************************************************************
# Following are default face and edge colors, default tick sizes,
# default fontsizes for ticklabels, and so on.  See
# https://matplotlib.org/api/axes_api.html#module-matplotlib.axes

axes.facecolor:     white   ## axes background color
axes.edgecolor:     black   ## axes edge color
axes.linewidth:     0.5     ## edge linewidth
axes.grid:          False   ## display grid or not
axes.grid.axis:     both    ## which axis the grid should apply to
axes.grid.which:    major   ## gridlines at {major, minor, both} ticks
axes.titlelocation: right   ## alignment of the title: {left, right, center}
axes.titlesize:     medium  ## fontsize of the axes title
axes.titleweight:   normal  ## font weight of title
axes.titlecolor:    auto    ## color of the axes title, auto falls back to text.color
axes.titlepad:      2.0     ## pad between axes and title in points
axes.labelsize:     medium  ## fontsize of the x any y labels
axes.labelpad:      1.0     ## space between label and axis
axes.labelweight:   normal  ## weight of the x and y labels
axes.labelcolor:    black
axes.axisbelow:     line    ## draw axis gridlines and ticks:
                              #     - below patches (True)
                              #     - above patches but below lines ('line')
                              #     - above all (False)

axes.formatter.limits : -1, 1  ## use scientific notation if log10
                                # of the axis range is smaller than the
                                # first or larger than the second
axes.formatter.use_locale : False  ## When True, format tick labels
                                    # according to the user's locale.
                                    # For example, use ',' as a decimal
                                    # separator in the fr_FR locale.
axes.formatter.use_mathtext: True  ## When True, use mathtext for scientific
                                      # notation.
axes.formatter.min_exponent : 0  ## minimum exponent to format in scientific notation
axes.formatter.useoffset : False  ## If True, the tick label formatter
                                  # will default to labeling ticks relative
                                  # to an offset when the data range is
                                  # small compared to the minimum absolute
                                  # value of the data.
axes.formatter.offset_threshold: 0  ## When useoffset is True, the offset
                                      # will be used when it can remove
                                      # at least this number of significant
                                      # digits from tick labels.

axes.spines.left   : True  ## display axis spines
axes.spines.bottom : True
axes.spines.top    : True
axes.spines.right  : True

axes.unicode_minus : True
axes.prop_cycle : cycler('color', ['1f77b4', 'ff7f0e', '2ca02c', 'd62728', '9467bd', '8c564b', 'e377c2', '7f7f7f', 'bcbd22', '17becf'])
axes.autolimit_mode: data
axes.xmargin   : .02
axes.ymargin   : .02
polaraxes.grid : True
axes3d.grid    : True


# ***************************************************************************
# * TICKS                                                                   *
# ***************************************************************************
# See https://matplotlib.org/api/axis_api.html#matplotlib.axis.Tick
xtick.top:           False   ## draw ticks on the top side
xtick.bottom:        True    ## draw ticks on the bottom side
xtick.labeltop:      False   ## draw label on the top
xtick.labelbottom:   True    ## draw label on the bottom
xtick.major.size:    2       ## major tick size in points
xtick.minor.size:    1       ## minor tick size in points
xtick.major.width:   0.5     ## major tick width in points
xtick.minor.width:   0.5     ## minor tick width in points
xtick.major.pad:     2       ## distance to major tick label in points
xtick.minor.pad:     2       ## distance to the minor tick label in points
xtick.color:         black   ## color of the tick labels
xtick.labelsize:     medium  ## fontsize of the tick labels
xtick.direction:     in      ## direction: {in, out, inout}
xtick.minor.visible: False   ## visibility of minor ticks on x-axis
xtick.major.top:     True    ## draw x axis top major ticks
xtick.major.bottom:  True    ## draw x axis bottom major ticks
xtick.minor.top:     True    ## draw x axis top minor ticks
xtick.minor.bottom:  True    ## draw x axis bottom minor ticks
xtick.alignment:     center  ## alignment of xticks

ytick.left:          True    ## draw ticks on the left side
ytick.right:         False   ## draw ticks on the right side
ytick.labelleft:     True    ## draw tick labels on the left side
ytick.labelright:    False   ## draw tick labels on the right side
ytick.major.size:    2       ## major tick size in points
ytick.minor.size:    1       ## minor tick size in points
ytick.major.width:   0.5     ## major tick width in points
ytick.minor.width:   0.5     ## minor tick width in points
ytick.major.pad:     2       ## distance to major tick label in points
ytick.minor.pad:     2       ## distance to the minor tick label in points
ytick.color:         black   ## color of the tick labels
ytick.labelsize:     medium  ## fontsize of the tick labels
ytick.direction:     in      ## direction: {in, out, inout}
ytick.minor.visible: False   ## visibility of minor ticks on y-axis
ytick.major.left:    True    ## draw y axis left major ticks
ytick.major.right:   True    ## draw y axis right major ticks
ytick.minor.left:    True    ## draw y axis left minor ticks
ytick.minor.right:   True    ## draw y axis right minor ticks
ytick.alignment:     center_baseline  ## alignment of yticks


#  ***************************************************************************
#  * GRIDS                                                                   *
#  ***************************************************************************
grid.color:     b0b0b0     ## grid color
grid.linestyle: -          ## solid
grid.linewidth: 0.3        ## in points
grid.alpha:     1          ## transparency, between 0.0 and 1.0


# ***************************************************************************
# * LEGEND                                                                  *
# ***************************************************************************
legend.loc:            best
legend.frameon:        False     ## if True, draw the legend on a background patch
legend.framealpha:     1        ## legend patch transparency
legend.facecolor:      inherit  ## inherit from axes.facecolor; or color spec
legend.edgecolor:      0.8      ## background patch boundary color
legend.fancybox:       True     ## if True, use a rounded box for the legend background, else a rectangle
legend.shadow:         False    ## if True, give background a shadow effect
legend.numpoints:      1        ## the number of marker points in the legend line
legend.scatterpoints:  1        ## number of scatter points
legend.markerscale:    0.8      ## the relative size of legend markers vs. original
legend.fontsize:       medium
legend.title_fontsize: None    ## None sets to the same as the default axes.

# Dimensions as fraction of fontsize:
legend.borderpad:     0.2  ## border whitespace
legend.labelspacing:  0.2  ## the vertical space between the legend entries
legend.handlelength:  1.0  ## the length of the legend lines
legend.handleheight:  0.4  ## the height of the legend handle
legend.handletextpad: 0.1  ## the space between the legend line and legend text
legend.borderaxespad: 0.4  ## the border between the axes and legend edge
legend.columnspacing: 0.4  ## column separation


# ***************************************************************************
# * FIGURE                                                                  *
# ***************************************************************************
# See https://matplotlib.org/api/figure_api.html#matplotlib.figure.Figure
figure.titlesize   : medium    ## size of the figure title (``Figure.suptitle()``)
figure.titleweight : normal    ## weight of the figure title
figure.figsize     : 1.7, 1.275 ## figure size in inches
figure.dpi         : 72        ## figure dots per inch
figure.facecolor   : white     ## figure facecolor
figure.edgecolor   : white     ## figure edgecolor
figure.frameon     : False     ## enable figure frame
figure.max_open_warning : 6    ## The maximum number of figures to open through
                                # the pyplot interface before emitting a warning.
                                # If less than one this feature is disabled.

# The figure subplot parameters.  All dimensions are a fraction of the figure width and height.
figure.subplot.left:   0  ## the left side of the subplots of the figure
figure.subplot.right:  1    ## the right side of the subplots of the figure
figure.subplot.bottom: 0   ## the bottom of the subplots of the figure
figure.subplot.top:    1   ## the top of the subplots of the figure
figure.subplot.wspace: 0    ## the amount of width reserved for space between subplots,
                                # expressed as a fraction of the average axis width
figure.subplot.hspace: 0    ## the amount of height reserved for space between subplots,
                                # expressed as a fraction of the average axis height

# Figure layout
figure.autolayout : False  ## When True, automatically adjust subplot
                            # parameters to make the plot fit the figure
                            # using `tight_layout`
figure.constrained_layout.use: True  ## When True, automatically make plot
                                        # elements fit on the figure. (Not
                                        # compatible with `autolayout`, above).

figure.constrained_layout.h_pad:  0.04167  ## Padding around axes objects. Float representing
figure.constrained_layout.w_pad:  0.04167  ## inches. Default is 3./72. inches (3 pts)
figure.constrained_layout.hspace: 0.00     ## Space between subplot groups. Float representing
figure.constrained_layout.wspace: 0.00     ## a fraction of the subplot widths being separated.


# # ***************************************************************************
# # * ERRORBAR PLOTS                                                          *
# # ***************************************************************************
errorbar.capsize: 1  ## length of end cap on error bars in pixels


# ***************************************************************************
# * HISTOGRAM PLOTS                                                         *
# ***************************************************************************
hist.bins : auto  ## The default number of histogram bins or 'auto'.


# ***************************************************************************
# * SCATTER PLOTS                                                           *
# ***************************************************************************
scatter.marker : .         ## The default marker type for scatter plots.
scatter.edgecolors : face  ## The default edge colors for scatter plots.


# ***************************************************************************
# * PATHS                                                                   *
# ***************************************************************************
path.simplify : True  ## When True, simplify paths by removing "invisible"
                       # points to reduce file size and increase rendering
                       # speed
path.simplify_threshold : 0.1              ## The threshold of similarity below
                                           # which vertices will be removed in
                                           # the simplification process.
path.snap : True  ## When True, rectilinear axis-aligned paths will be snapped
                   # to the nearest pixel when certain criteria are met.
                   # When False, paths will never be snapped.
path.sketch : None  ## May be None, or a 3-tuple of the form:
                     # (scale, length, randomness).
                     #     - *scale* is the amplitude of the wiggle
                     #         perpendicular to the line (in pixels).
                     #     - *length* is the length of the wiggle along the
                     #         line (in pixels).
                     #     - *randomness* is the factor by which the length is
                     #         randomly scaled.


# ***************************************************************************
# * SAVING FIGURES                                                          *
# ***************************************************************************
# The default savefig params can be different from the display params
# e.g., you may want a higher resolution, or to make the figure
# background white
savefig.dpi       : figure      ## figure dots per inch or 'figure'
savefig.facecolor : white       ## figure facecolor when saving
savefig.edgecolor : white       ## figure edgecolor when saving
savefig.format    : pdf         ## {png, ps, pdf, svg}
savefig.bbox      : standard    ## {tight, standard}
                                 # 'tight' is incompatible with pipe-based animation
                                 # backends but will workd with temporary file based ones:
                                 # e.g. setting animation.writer to ffmpeg will not work,
                                 # use ffmpeg_file instead
savefig.pad_inches: 0.1         ## Padding to be used when bbox is set to 'tight'
savefig.directory: ~            ## default directory in savefig dialog box,
                                 # leave empty to always use current working directory
savefig.transparent : True      ## setting that controls whether figures are saved with a
                                 # transparent background by default
savefig.orientation : portrait  ## Orientation of saved figure

## tk backend params
tk.window_focus   : False  ## Maintain shell focus for TkAgg

## ps backend params
ps.papersize      : auto    ## {auto, letter, legal, ledger, A0-A10, B0-B10}
ps.useafm         : False   ## use of afm fonts, results in small files
ps.usedistiller   : ghostscript   ## {ghostscript, xpdf, None}
                             # Experimental: may produce smaller files.
                             # xpdf intended for production of publication quality files,
                             # but requires ghostscript, xpdf and ps2eps
ps.distiller.res  : 6000    ## dpi
ps.fonttype       : 3       ## Output Type 3 (Type3) or Type 42 (TrueType)

## PDF backend params
pdf.compression    : 0  ## integer from 0 to 9
                         # 0 disables compression (good for debugging)
pdf.fonttype       : 3  ## Output Type 3 (Type3) or Type 42 (TrueType)
pdf.use14corefonts : False
pdf.inheritcolor   : False

## SVG backend params
svg.image_inline : True  ## Write raster image data directly into the SVG file
svg.fonttype : path      ## How to handle SVG fonts:
                          #     path: Embed characters as paths -- supported
                          #           by most SVG renderers
                          #     None: Assume fonts are installed on the
                          #           machine where the SVG will be viewed.
svg.hashsalt : None      ## If not None, use this string as hash salt instead of uuid4

# # ***************************************************************************
# # * INTERACTIVE KEYMAPS                                                     *
# # ***************************************************************************
# # Event keys to interact with figures/plots via keyboard.
# # See https://matplotlib.org/users/navigation_toolbar.html for more details on
# # interactive navigation.  Customize these settings according to your needs.
# # Leave the field(s) empty if you don't need a key-map. (i.e., fullscreen : '')
# keymap.fullscreen : f, ctrl+f   ## toggling
# keymap.home : h, r, home        ## home or reset mnemonic
# keymap.back : left, c, backspace, MouseButton.BACK  ## forward / backward keys
# keymap.forward : right, v, MouseButton.FORWARD      ## for quick navigation
# keymap.pan : p                  ## pan mnemonic
# keymap.zoom : o                 ## zoom mnemonic
# keymap.save : s, ctrl+s         ## saving current figure
# keymap.help : f1                ## display help about active tools
# keymap.quit : ctrl+w, cmd+w, q  ## close the current figure
# keymap.quit_all : W, cmd+W, Q   ## close all figures
# keymap.grid : g                 ## switching on/off major grids in current axes
# keymap.grid_minor : G           ## switching on/off minor grids in current axes
# keymap.yscale : l               ## toggle scaling of y-axes ('log'/'linear')
# keymap.xscale : k, L            ## toggle scaling of x-axes ('log'/'linear')
# keymap.copy : ctrl+c, cmd+c     ## Copy figure to clipboard


# # ***************************************************************************
# # * ANIMATION                                                               *
# # ***************************************************************************
# animation.html : none  ## How to display the animation as HTML in
#                         # the IPython notebook:
#                         #     - 'html5' uses HTML5 video tag
#                         #     - 'jshtml' creates a Javascript animation
# animation.writer  : ffmpeg  ## MovieWriter 'backend' to use
# animation.codec   : h264    ## Codec to use for writing movie
# animation.bitrate : -1      ## Controls size/quality tradeoff for movie.
#                              # -1 implies let utility auto-determine
# animation.frame_format : png      ## Controls frame format used by temp files
# animation.ffmpeg_path  : ffmpeg   ## Path to ffmpeg binary. Without full path
#                                    # $PATH is searched
# animation.ffmpeg_args  :          ## Additional arguments to pass to ffmpeg
# animation.convert_path : convert  ## Path to ImageMagick's convert binary.
#                                    # On Windows use the full path since convert
#                                    # is also the name of a system tool.
# animation.convert_args :          ## Additional arguments to pass to convert
# animation.embed_limit  : 20.0     ## Limit, in MB, of size of base64 encoded
#                                    # animation in HTML (i.e. IPython notebook)

# mpl_toolkits.legacy_colorbar: False

